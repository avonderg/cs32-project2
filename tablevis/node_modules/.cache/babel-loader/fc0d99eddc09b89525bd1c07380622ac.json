{"ast":null,"code":"var _jsxFileName = \"/Users/neilxu/Documents/cs32/project-2-avonderg-nxu4-sanand14/tablevis/src/components/TableVisualizer.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport Table from \"./Table\";\nimport TableLoader from \"./TableLoader\"; // @ts-ignore\n\nimport { AwesomeButton } from \"react-awesome-button\"; // @ts-ignore\n\nimport \"react-awesome-button/dist/styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TableVisualizer() {\n  _s();\n\n  const [currTable, setCurrTable] = useState(\"\");\n  const [tableName, setTableName] = useState(\"\");\n  const [tableRows, setTableRows] = useState([]);\n  const [tableNames, setTableNames] = useState([]);\n  const [tableHeaders, setTableHeaders] = useState([]);\n  const [addInputs, setAddInputs] = useState(new Map());\n  const [updateInputs, setUpdateInputs] = useState(new Map());\n  const [rowToUpdate, setRowToUpdate] = useState(\"\");\n  let config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\"\n    }\n  };\n\n  const getNames = () => {\n    axios.get(\"http://localhost:4567/tableNames\", config).then(response => {\n      console.log(response.data);\n      setTableNames(response.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const getTable = sortCol => {\n    if (tableName == \"\") {\n      return;\n    }\n\n    const toSend = {\n      name: tableName,\n      sortCol: sortCol\n    };\n    axios.post(\"http://localhost:4567/table\", toSend, config).then(response => {\n      console.log(response.data);\n      console.log(response.data[\"rows\"]);\n      console.log(response.data[\"headers\"]);\n      setTableRows(response.data[\"rows\"]);\n      setTableHeaders(response.data[\"headers\"]);\n      setCurrTable(tableName);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const addRow = toSend => {\n    axios.post(\"http://localhost:4567/add\", toSend, config).then(response => {\n      console.log(response.data);\n      setTableRows(response.data.rows);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const deleteRow = rowToDelete => {\n    let toSend = {\n      name: tableName,\n      row: rowToDelete\n    };\n    axios.post(\"http://localhost:4567/delete\", toSend, config).then(response => {\n      console.log(response.data);\n      setTableRows(response.data.rows);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const updateRow = toSend => {\n    axios.post(\"http://localhost:4567/update\", toSend, config).then(response => {\n      console.log(response.data);\n      setTableRows(response.data.rows);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const loadAddInputBoxes = () => {\n    let inputBoxes = [];\n\n    for (let i = 0; i < tableHeaders.length; i++) {\n      inputBoxes.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputField\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: tableHeaders[i],\n          children: [tableHeaders[i], \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"clearInput\",\n          type: \"text\",\n          onChange: e => {\n            console.log(\"changed input\");\n            setAddInputs(map => new Map(map.set(tableHeaders[i], e.target.value)));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this));\n    }\n\n    return inputBoxes;\n  };\n\n  const loadUpdateInputBoxes = () => {\n    let inputBoxes = [];\n    inputBoxes.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputField\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"rowNum\",\n        children: \"Row Number: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"clearInputNum\",\n        type: \"number\",\n        min: \"1\",\n        max: tableRows.length,\n        onChange: e => {\n          setRowToUpdate(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this));\n\n    for (let i = 0; i < tableHeaders.length; i++) {\n      inputBoxes.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputField\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: tableHeaders[i],\n          children: [tableHeaders[i], \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"clearInput\",\n          type: \"text\",\n          onChange: e => {\n            console.log(\"changed input\");\n            setUpdateInputs(map => new Map(map.set(tableHeaders[i], e.target.value)));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this));\n    }\n\n    return inputBoxes;\n  };\n\n  useEffect(() => {\n    getNames();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to Batman Table Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Please choose a table to load\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tableLoaderDiv\",\n      children: [/*#__PURE__*/_jsxDEV(TableLoader, {\n        tableNames: tableNames,\n        change: setTableName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AwesomeButton, {\n        type: \"primary\",\n        onPress: () => {\n          getTable(\"1\");\n        },\n        children: \"Load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), tableRows.length > 0 ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Now Viewing: \", currTable]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 31\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"majorRow\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"colLeft\",\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          name: tableName,\n          headers: tableHeaders,\n          rows: tableRows,\n          deleteFunc: deleteRow,\n          sortFunc: getTable\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"colRight\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: tableRows.length > 0 ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"addDiv\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Add to Table\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 19\n              }, this), loadAddInputBoxes(), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"modButton\",\n                onClick: () => {\n                  console.log(\"Adding new row\");\n                  console.log(addInputs); // take inputs from boxes,\n\n                  let toAdd = {\n                    name: tableName,\n                    columns: Array.from(addInputs.keys()),\n                    values: Array.from(addInputs.values())\n                  };\n                  console.log(toAdd.columns);\n                  console.log(toAdd.values);\n                  addRow(toAdd);\n                },\n                children: \"Add\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"updateDiv\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Update Table\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 19\n              }, this), loadUpdateInputBoxes(), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"modButton\",\n                onClick: () => {\n                  console.log(\"Adding new row\");\n                  console.log(updateInputs); // take inputs from boxes,\n\n                  let toUpdate = {\n                    name: tableName,\n                    row: tableRows[parseInt(rowToUpdate) - 1],\n                    columns: Array.from(updateInputs.keys()),\n                    values: Array.from(updateInputs.values())\n                  };\n                  console.log(toUpdate.columns);\n                  console.log(toUpdate.values);\n                  updateRow(toUpdate);\n                },\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TableVisualizer, \"iZ3pOrqXgoi4wnDCfbxO1bmZ/U8=\");\n\n_c = TableVisualizer;\nexport default TableVisualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableVisualizer\");","map":{"version":3,"sources":["/Users/neilxu/Documents/cs32/project-2-avonderg-nxu4-sanand14/tablevis/src/components/TableVisualizer.tsx"],"names":["React","useEffect","useState","axios","Table","TableLoader","AwesomeButton","TableVisualizer","currTable","setCurrTable","tableName","setTableName","tableRows","setTableRows","tableNames","setTableNames","tableHeaders","setTableHeaders","addInputs","setAddInputs","Map","updateInputs","setUpdateInputs","rowToUpdate","setRowToUpdate","config","headers","getNames","get","then","response","console","log","data","catch","error","getTable","sortCol","toSend","name","post","addRow","rows","deleteRow","rowToDelete","row","updateRow","loadAddInputBoxes","inputBoxes","i","length","push","e","map","set","target","value","loadUpdateInputBoxes","toAdd","columns","Array","from","keys","values","toUpdate","parseInt"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport Table from \"./Table\";\nimport TableLoader from \"./TableLoader\";\n// @ts-ignore\nimport { AwesomeButton } from \"react-awesome-button\";\n// @ts-ignore\nimport \"react-awesome-button/dist/styles.css\";\n\nfunction TableVisualizer() {\n  const [currTable, setCurrTable] = useState(\"\");\n  const [tableName, setTableName] = useState(\"\");\n  const [tableRows, setTableRows] = useState([]);\n  const [tableNames, setTableNames] = useState([]);\n  const [tableHeaders, setTableHeaders] = useState([]);\n  const [addInputs, setAddInputs] = useState(new Map());\n  const [updateInputs, setUpdateInputs] = useState(new Map());\n  const [rowToUpdate, setRowToUpdate] = useState(\"\");\n\n  type AddParams = {\n    name: string;\n    columns: string[];\n    values: string[];\n  };\n\n  type DeleteParams = {\n    name: string;\n    row: Record<string, string>;\n  };\n\n  type UpdateParams = {\n    name: string;\n    row: Record<string, string>;\n    columns: string[];\n    values: string[];\n  };\n\n  let config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n    },\n  };\n\n  const getNames = () => {\n    axios\n      .get(\"http://localhost:4567/tableNames\", config)\n      .then((response) => {\n        console.log(response.data);\n        setTableNames(response.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const getTable = (sortCol: string) => {\n    if (tableName == \"\") {\n      return;\n    }\n    const toSend = {\n      name: tableName,\n      sortCol: sortCol,\n    };\n    axios\n      .post(\"http://localhost:4567/table\", toSend, config)\n      .then((response) => {\n        console.log(response.data);\n        console.log(response.data[\"rows\"]);\n        console.log(response.data[\"headers\"]);\n\n        setTableRows(response.data[\"rows\"]);\n        setTableHeaders(response.data[\"headers\"]);\n        setCurrTable(tableName);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const addRow = (toSend: AddParams) => {\n    axios\n      .post(\"http://localhost:4567/add\", toSend, config)\n      .then((response) => {\n        console.log(response.data);\n        setTableRows(response.data.rows);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const deleteRow = (rowToDelete: Record<string, string>) => {\n    let toSend: DeleteParams = {\n      name: tableName,\n      row: rowToDelete,\n    };\n    axios\n      .post(\"http://localhost:4567/delete\", toSend, config)\n      .then((response) => {\n        console.log(response.data);\n        setTableRows(response.data.rows);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const updateRow = (toSend: UpdateParams) => {\n    axios\n      .post(\"http://localhost:4567/update\", toSend, config)\n      .then((response) => {\n        console.log(response.data);\n        setTableRows(response.data.rows);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const loadAddInputBoxes = () => {\n    let inputBoxes = [];\n    for (let i = 0; i < tableHeaders.length; i++) {\n      inputBoxes.push(\n        <div className=\"inputField\">\n          <label htmlFor={tableHeaders[i]}>{tableHeaders[i]}:</label>\n          <input\n            className=\"clearInput\"\n            type=\"text\"\n            onChange={(e) => {\n              console.log(\"changed input\");\n              setAddInputs(\n                (map) => new Map(map.set(tableHeaders[i], e.target.value))\n              );\n            }}\n          />\n        </div>\n      );\n    }\n    return inputBoxes;\n  };\n\n  const loadUpdateInputBoxes = () => {\n    let inputBoxes = [];\n    inputBoxes.push(\n      <div className=\"inputField\">\n        <label htmlFor=\"rowNum\">Row Number: </label>\n        <input\n          className=\"clearInputNum\"\n          type=\"number\"\n          min=\"1\"\n          max={tableRows.length}\n          onChange={(e) => {\n            setRowToUpdate(e.target.value);\n          }}\n        />\n      </div>\n    );\n    for (let i = 0; i < tableHeaders.length; i++) {\n      inputBoxes.push(\n        <div className=\"inputField\">\n          <label htmlFor={tableHeaders[i]}>{tableHeaders[i]}:</label>\n          <input\n            className=\"clearInput\"\n            type=\"text\"\n            onChange={(e) => {\n              console.log(\"changed input\");\n              setUpdateInputs(\n                (map) => new Map(map.set(tableHeaders[i], e.target.value))\n              );\n            }}\n          />\n        </div>\n      );\n    }\n    return inputBoxes;\n  };\n\n  useEffect(() => {\n    getNames();\n  }, []);\n\n  return (\n    <div>\n      <h1>Welcome to Batman Table Visualizer</h1>\n      <h3>Please choose a table to load</h3>\n      <div className=\"tableLoaderDiv\">\n        <TableLoader tableNames={tableNames} change={setTableName} />\n        <AwesomeButton\n          type=\"primary\"\n          onPress={() => {\n            getTable(\"1\");\n          }}\n        >\n          Load\n        </AwesomeButton>\n      </div>\n      {tableRows.length > 0 ? <h2>Now Viewing: {currTable}</h2> : \"\"}\n      <div className=\"majorRow\">\n        <div className=\"colLeft\">\n          <Table\n            name={tableName}\n            headers={tableHeaders}\n            rows={tableRows}\n            deleteFunc={deleteRow}\n            sortFunc={getTable}\n          />\n        </div>\n        <div className=\"colRight\">\n          <div>\n            {tableRows.length > 0 ? (\n              <React.Fragment>\n                <div className=\"addDiv\">\n                  <h4>Add to Table</h4>\n                  {loadAddInputBoxes()}\n                  <button\n                    className=\"modButton\"\n                    onClick={() => {\n                      console.log(\"Adding new row\");\n                      console.log(addInputs);\n                      // take inputs from boxes,\n                      let toAdd: AddParams = {\n                        name: tableName,\n                        columns: Array.from(addInputs.keys()),\n                        values: Array.from(addInputs.values()),\n                      };\n                      console.log(toAdd.columns);\n                      console.log(toAdd.values);\n                      addRow(toAdd);\n                    }}\n                  >\n                    Add\n                  </button>\n                </div>\n\n                <div className=\"updateDiv\">\n                  <h4>Update Table</h4>\n                  {loadUpdateInputBoxes()}\n                  <button\n                    className=\"modButton\"\n                    onClick={() => {\n                      console.log(\"Adding new row\");\n                      console.log(updateInputs);\n                      // take inputs from boxes,\n                      let toUpdate: UpdateParams = {\n                        name: tableName,\n                        row: tableRows[parseInt(rowToUpdate) - 1],\n                        columns: Array.from(updateInputs.keys()),\n                        values: Array.from(updateInputs.values()),\n                      };\n                      console.log(toUpdate.columns);\n                      console.log(toUpdate.values);\n                      updateRow(toUpdate);\n                    }}\n                  >\n                    Update\n                  </button>\n                </div>\n              </React.Fragment>\n            ) : null}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default TableVisualizer;\n"]},"metadata":{},"sourceType":"module"}